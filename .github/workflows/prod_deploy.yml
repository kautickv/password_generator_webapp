name: Deploy to production on merge to main branch
on:
  push:
    branches:
      - main

jobs:
  main_merge:
    # Run jobs on merge to main
    name: Deploy Prod
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      issues: read
      pull-requests: read
      statuses: write

    steps:
      - uses: hashicorp/setup-terraform@v2

      # Checkout Main Repo
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Set execute permissions on bash script
        working-directory: ./.github
        run: |
          pwd
          ls
          chmod +x scripts/build_and_zip.sh
          chmod +x scripts/extract_iam_role_arns.sh

      - name: Build and zip python requirement file
        id: backend_build
        working-directory: ./.github
        run: |
          ./scripts/build_and_zip.sh

      - name: Extract AWS Roles ARNs
        working-directory: ./.github
        run: |
          bash ./scripts/extract_iam_role_arns.sh '../Infra/deployment_config.json' 'prod' >> $GITHUB_ENV

      - name: Assume DNS account role
        id: dns_account_role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.DNS_IAM_ROLE_ARN }}
          aws-region: ${{ env.DNS_IAM_ROLE_REGION }}
          role-session-name: DNSSession

      - name: Set DNS credentials as env variables
        run: |
          echo "DNS_AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "DNS_AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "DNS_AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}" >> $GITHUB_ENV

      - name: Assume prod account role
        id: dev_account_role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.DEFAULT_IAM_ROLE_ARN }}
          aws-region: ${{ env.DEFAULT_IAM_ROLE_REGION }}
          role-session-name: prodSession

      - name: Terraform Init
        id: init
        working-directory: ./Infra/environments/prod
        env:
          TF_VAR_dns_aws_access_key_id: ${{ env.DNS_AWS_ACCESS_KEY_ID }}
          TF_VAR_dns_aws_secret_access_key: ${{ env.DNS_AWS_SECRET_ACCESS_KEY }}
          TF_VAR_dns_aws_session_token: ${{ env.DNS_AWS_SESSION_TOKEN }}
        run: |
          terraform init
          ls

      - name: Terraform Refresh
        working-directory: ./Infra/environments/dev
        env:
          TF_VAR_dns_aws_access_key_id: ${{ env.DNS_AWS_ACCESS_KEY_ID }}
          TF_VAR_dns_aws_secret_access_key: ${{ env.DNS_AWS_SECRET_ACCESS_KEY }}
          TF_VAR_dns_aws_session_token: ${{ env.DNS_AWS_SESSION_TOKEN }}
        run: |
          terraform refresh -no-color

      - name: Terraform Validate
        id: validate
        working-directory: ./Infra/environments/prod
        env:
          TF_VAR_dns_aws_access_key_id: ${{ env.DNS_AWS_ACCESS_KEY_ID }}
          TF_VAR_dns_aws_secret_access_key: ${{ env.DNS_AWS_SECRET_ACCESS_KEY }}
          TF_VAR_dns_aws_session_token: ${{ env.DNS_AWS_SESSION_TOKEN }}
        run: |
          terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ./Infra/environments/prod
        env:
          TF_VAR_dns_aws_access_key_id: ${{ env.DNS_AWS_ACCESS_KEY_ID }}
          TF_VAR_dns_aws_secret_access_key: ${{ env.DNS_AWS_SECRET_ACCESS_KEY }}
          TF_VAR_dns_aws_session_token: ${{ env.DNS_AWS_SESSION_TOKEN }}
        run: |
          terraform plan -var-file="deploy_prod.tfvars" -out=tfplan
        continue-on-error: true

      - name: Terraform Apply
        working-directory: ./Infra/environments/prod
        env:
          TF_VAR_dns_aws_access_key_id: ${{ env.DNS_AWS_ACCESS_KEY_ID }}
          TF_VAR_dns_aws_secret_access_key: ${{ env.DNS_AWS_SECRET_ACCESS_KEY }}
          TF_VAR_dns_aws_session_token: ${{ env.DNS_AWS_SESSION_TOKEN }}
        run: |
          terraform apply -var-file="deploy_prod.tfvars" -auto-approve
